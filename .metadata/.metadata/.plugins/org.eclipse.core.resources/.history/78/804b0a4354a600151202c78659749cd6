package com.kiwilandtrains.core;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

import com.kiwilandtrains.manager.CityGraphManager;

/**
 * 
 * Desc: Class to represent path between two vertices
 * 
 * @author zekigu
 *
 */
public class Path {

	// list should maintain insertion order. this is essential
	ArrayList<CityVertex> nodeList;
	
	public Path() {
		nodeList = new ArrayList<CityVertex>();		
	}
	
	/**
	 * 
	 * Desc: Method to create and return path recursively by looking prevmap
	 * 
	 * @param cityPrevMap
	 * @param current
	 */
	public void createPath(HashMap<String, String> cityPrevMap, CityVertex current) {
		if(cityPrevMap.get(current.getName()) != null) {
			String prevVertexStr = cityPrevMap.get(current.getName());
			CityVertex prevVertex = CityGraphManager.getInstance().getCityGraph().getVertex(prevVertexStr);
			nodeList.add(prevVertex);
			createPath(cityPrevMap, prevVertex);
		}
	}
	
	/**
	 * 
	 * Desc: Returns path description as A-B-C..
	 * 
	 * @return
	 */
	public String getPathDesc() {
		Collections.reverse(nodeList);
		
		String path = "";
		for(int i=0; i<nodeList.size();i++){
			path += nodeList.get(i).getName() + " "; 
		}
		
		return path;
	}
}
